// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//! remove email from this model

model User {
  id                   Int           @id @default(autoincrement())
  username             String
  phoneNumber          String        @unique
  password             String
  wallet               BigInt        @default(0)
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  onRamps              OnRamp[]
  sentTransactions     Transaction[] @relation("SentTransactions")
  receivedTransactions Transaction[] @relation("ReceivedTransactions")
}

model OnRamp {
  id        Int          @id @default(autoincrement())
  user      User         @relation(fields: [userId], references: [id])
  userId    Int
  type      OnRampType
  amount    BigInt       @default(0)
  status    OnRampStatus
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

enum OnRampType {
  DEPOSIT
  WITHDRAW
}

enum OnRampStatus {
  PENDING
  COMPLETED
  FAILED
}

model Transaction {
  id         Int  @id @default(autoincrement())
  fromUser   User @relation("SentTransactions", fields: [fromUserId], references: [id])
  fromUserId Int
  fromUserName String

  toUser   User @relation("ReceivedTransactions", fields: [toUserId], references: [id])
  toUserId Int
  toUserName String

  type      TransactionType
  status    TransactionStatus
  amount    BigInt            @default(0)
  createdAt DateTime          @default(now())
   updatedAt DateTime     @updatedAt
}



enum TransactionType {
  TRANSFER
  PAYMENT
  REFUND
}

enum TransactionStatus {
  PENDING
  SUCCESS
  FAILED
}
